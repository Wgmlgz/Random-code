#include <queue>     // библиотека для использования очереди
#include <iostream>  // библиотека для печати в файл окно консоли
#include <fstream>   // библиотека для печати в файл
using namespace std; // использование стандартного пространства имен

struct BinaryTree {         // структура описывающая бинарное дерево
  int value = -1;           // значение вершины
  BinaryTree* left = NULL;  // указатель на левую вершину
  BinaryTree* right = NULL; // указатель на правую вершину
};

void AddNode(BinaryTree* tree, int n) {   // метод довавления элемента в дерево ищущий место для вставки "слой за слоем"
  if (tree->value == -1) {                // если дерево пустое
    tree->value = n;                      // добавлем элемент в корень дерева
  } else {                   
    queue<BinaryTree*> q;                 // если нет, то создаем очередь из ветвей
    q.push(tree);                         // и добавляем в неё корень дерева
    while (true) {                        // бесконечный цикл, выходим из которого, когда найдено место для вставки
      BinaryTree* t = q.front();          // получаеи первый элемент в очереди
      q.pop();                            // удаляем его из очереди

      if (t->left != NULL) {              // если левая ветвь дерева не пустая
        q.push(t->left);                  // то добавляем её в очередь
      } else {                            // если левая ветка дерева пустая то место для вставки найдено
        BinaryTree* tmp = new BinaryTree; // создаем новую ветку дерева
        tmp->value = n;                   // присваеваем ей значение, которое мы хотим вставить
        t->left = tmp;                    // вставляем созданную ветку как левую ветку предыдущей ветки
        break;                            // мы нашли мемто для вставки, выходим из бесконечного цикла и завершаем работу функции
      }
      if (t->right != NULL) {             // если правая ветвь дерева не пустая
        q.push(t->right);                 // то добавляем её в очередь
      } else {                            // если левая ветка дерева пустая то место для вставки найдено
        BinaryTree* tmp = new BinaryTree; // создаем новую ветку дерева
        tmp->value = n;                   // присваеваем ей значение, которое мы хотим вставить
        t->right = tmp;                   // вставляем созданную ветку как правую ветку предыдущей ветки
        break;                            // мы нашли мемто для вставки, выходим из бесконечного цикла и завершаем работу функции
      }
    }
  }
}

void Print(BinaryTree* tree) {    // метод печати дерева "слой за слоем"
  ofstream tree_file("tree.txt"); // файл в который производится печать 
                                  
  queue<BinaryTree*> q;           // создаем очередь из ветвей       
  q.push(tree);                   // и добавляем в неё корень дерева
                                  // 
  while (!q.empty()) {            // пока не прошлись по всем элементам продолжаем печать
    BinaryTree* t = q.front();    // получаеи первый элемент в очереди
    std::cout << t->value << " "; // печатаем в окно консоли
    tree_file << t->value << " "; // печатаем в файл
    q.pop();                      // удаляем его из очереди
                                  
    if (t->left != NULL) {        // если левая ветвь дерева не пустая
      q.push(t->left);            // то добавляем её в очередь
    }                             
    if (t->right != NULL) {       // если правая ветвь дерева не пустая
      q.push(t->right);           // то добавляем её в очередь
    }                             
  }                               
                                  
  tree_file.close();              // закрываем файл в который печатали
}

int main() { // основная функция программы
  BinaryTree tree; // создаем дерево

  /*добавляем последовательность двузначных чисел, полученную компиляцией числа,
  месяца, года рождения, числа, месяца, года выдачи студенческого билета,
  номера сотового телефона.*/
  AddNode(&tree, 1); 
  AddNode(&tree, 2);
  AddNode(&tree, 3);
  AddNode(&tree, 4);
  AddNode(&tree, 5);


              
  Print(&tree); // печатаем полученное дерево в окно консоли и файл      
                    
  return 0;         
}      

































































































// le cops have found me
/*
           .                                                                    
                                                         .  .                   
                             .***(@@@@@&*.*(..,,       ., ,.*,*(/               
                   /%%(./(&.  &,&@@@@@@@*.*. ....  #/./,,    ..*(,#/*           
                          #  .%#&@@@@@@@/.   (*. /***(**(*...,*&*%(/.          
                             /,,&@@@@@@&*,                   .. . (/,           
                                 .@@@%.                          ......         
                  ./,             #&%(                      .%,(/(*.,,.        
                   ((,            ,#&( (*               ,   .%,,...   ,         
                                   .%,#&&%                                      
                                   ,#,(&&&&%          ./.  /,                 
                                      ,@@@&%,            ,  ,.                  
                                                 ..////,              ,*      
                                                                       .        
                                                                      .         
                                                                      ..        
                                                                    ,*.         
                                   .,                               //.         
                                    ,*(.,      .,                  .*#.         
                                                           .,*   .,#%#,         
                                                  .*.(,/(*(**.   *,,#,,         
                                            ,.   ,, ,.      **,  /   ,.         
                                          . ..... ,/,(#((*,..     ,*./         
                                         ..          .      ,//(//(///         
                                                         .                      
                                                         .                      
                                                         .                      

                                              */












// oil floats in the rains